#!/usr/bin/env python3.6
"""Test harness for the Santorini Strategy."""
import json
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))
from Santorini.Common.pieces import Board, Worker, Direction
from Santorini.Common import rulechecker
from Santorini.Player.tree_strat import TreeStrategy as tree
from Santorini.Lib import echo


def parse_board(cells):
    """Converts a list of list of strings into a Board object."""
    new_board = [[0 for col in range(Board.BOARD_SIZE)] for row in
                 range(Board.BOARD_SIZE)]
    workers = {}
    for (row, rows) in enumerate(cells):
        for col in range(len(rows)):
            cur_cell = cells[row][col]
            if isinstance(cur_cell, int):
                new_board[row][col] = cur_cell
            elif cur_cell:
                new_board[row][col] = int(cur_cell[0])
                cur_worker = parse_worker(cur_cell[1:])
                if cur_worker:
                    workers[cur_worker] = (row, col)

    cur_board = Board(new_board, workers)
    return cur_board


def parse_direction(dir_list):
    """Convert a list of directions into our Direction representation.

    A Direction is [EastWest, NorthSouth] where EastWest is one of:
    "EAST" "PUT" "WEST" and NorthSouth is one of: "NORTH" "PUT" "SOUTH".
    """

    dir_table = {("PUT", "NORTH", ): Direction.NORTH,
                 ("PUT", "SOUTH", ): Direction.SOUTH,
                 ("EAST", "PUT"): Direction.EAST,
                 ("WEST", "PUT"): Direction.WEST,
                 ("PUT", "PUT"): Direction.STAY,
                 ("EAST", "NORTH"): Direction.NORTHEAST,
                 ("WEST", "NORTH"): Direction.NORTHWEST,
                 ("EAST", "SOUTH"): Direction.SOUTHEAST,
                 ("WEST", "SOUTH"): Direction.SOUTHWEST}

    return dir_table[tuple(dir_list)]


def parse_worker(string):
    """Convert an input worker string into a Worker object"""
    if string:
        player_num = int(string[-1:])
        player_name = string[:-1]

        return Worker(player_name, player_num)
    return None


def xstrategy(stdin):
    """Test harness for the Santorini strategy."""
    command_list = echo.json_echo(stdin)
    result = None
    board_in = None
    cur_worker = None
    move_dir = None
    player_name = None
    look_ahead = 0
    for index, command in enumerate(command_list):
        if isinstance(command, str):
            player_name = command
            pass
        elif isinstance(command, int):
            look_ahead = command
            if (index == len(command_list) - 1 or
                    isinstance(command_list[index + 1], str)):
                result = tree.do_survive(board_in, player_name,
                                         look_ahead)
                print(json.dumps("yes" if result else "no"))
        elif isinstance(command[0], list):
            board_in = parse_board(command)
            cur_worker = None
            move_dir = None
        elif command[0] == "move":
            cur_worker = parse_worker(command[1])
            move_dir = parse_direction(command[2])
            if (index == len(command_list) - 1 or
                    command_list[index + 1][0] != "+build"):
                result = tree.do_survive(board_in, player_name, look_ahead,
                                         cur_worker, move_dir)
                print(json.dumps("yes" if result else "no"))
        elif command[0] == "+build":
            build_dir = parse_direction(command[1])
            result = tree.do_survive(board_in, player_name, look_ahead,
                                     cur_worker, move_dir, build_dir)
            print(json.dumps("yes" if result else "no"))
    print()


def main():
    """Main function that reads from stdin and prints to stdout."""
    xstrategy(sys.stdin.read())


if __name__ == '__main__':
    main()
