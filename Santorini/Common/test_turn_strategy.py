#!/usr/bin/python3.6
import unittest
import turn_strategy

class TestTurnStrategy(unittest.TestCase):

    turn_strat = turn_strategy.TurnStrategy()

    def setUp(self):
        self.players = [[(2,1), (3,2)], [(3,5), (5, 5)]]
        self.buildings = [[1,2,3,2,2,4],
                          [1,1,1,1,1,1],
                          [2,2,2,2,3,2],
                          [1,1,1,1,1,1],
                          [2,2,2,2,2,0],
                          [3,3,3,2,3,2]]

    # tests node_generator with moves out of bounds, moves onto workers, builds onto workers, 
    # and building onto max height buildings
    def test__get_node_generator_bounds_worker_collisions_height(self):
        self.players[0][0] = (1, 0)
        self.buildings[5][4] = 4
        # data definition has to be changed so that the elements
        expected_moves = {((1, 0), (-1, 0), (1, 0)), ((1, 0), (-1, 0), (0, 1)), ((1, 0), (-1, 0), (1, 1)),

                          ((1, 0), (1, 0), (1, 0)), ((1, 0), (1, 0), (0, 1)), ((1, 0), (1, 0), (1, 1)),
                          ((1, 0), (1, 0), (-1, 0)), ((1, 0), (1, 0), (-1, 1)),

                          ((1, 0), (-1, 1), (0, -1)), ((1, 0), (-1, 1), (1, -1)), ((1, 0), (-1, 1), (1, 0)),
                          ((1, 0), (-1, 1), (1, 1)), ((1, 0), (-1, 1), (0, 1)),

                          ((1, 0), (0, 1), (-1, -1)), ((1, 0), (0, 1), (0, -1)), ((1, 0), (0, 1), (1, -1)),
                          ((1, 0), (0, 1), (-1, 0)),                             ((1, 0), (0, 1), (1, 0)),
                          ((1, 0), (0, 1), (-1, 1)), ((1, 0), (0, 1), (0, 1)), ((1, 0), (0, 1), (1, 1)),

                          ((1, 0), (1, 1), (-1, -1)), ((1, 0), (1, 1), (0, -1)), ((1, 0), (1, 1), (1, -1)),
                          ((1, 0), (1, 1), (-1, 0)),                             ((1, 0), (1, 1), (1, 0)),
                          ((1, 0), (1, 1), (-1, 1)), ((1, 0), (1, 1), (0, 1)),

                                                        ((3, 2), (-1, -1), (0, -1)), ((3, 2), (-1, -1), (1, -1)),
                          ((3, 2), (-1, -1), (-1, 0)),                            ((3, 2), (-1, -1), (1, 0)),
                          ((3, 2), (-1, -1), (-1, 1)), ((3, 2), (-1, -1), (0, 1)), ((3, 2), (-1, -1), (1, 1)),

                          ((3, 2), (0, -1), (-1, -1)), ((3, 2), (0, -1), (0, -1)), ((3, 2), (0, -1), (1, -1)),
                          ((3, 2), (0, -1), (-1, 0)),                            ((3, 2), (0, -1), (1, 0)),
                          ((3, 2), (0, -1), (-1, 1)), ((3, 2), (0, -1), (0, 1)), ((3, 2), (0, -1), (1, 1)),

                          ((3, 2), (1, -1), (-1, -1)), ((3, 2), (1, -1), (0, -1)), ((3, 2), (1, -1), (1, -1)),
                          ((3, 2), (1, -1), (-1, 0)),                             ((3, 2), (1, -1), (1, 0)),
                          ((3, 2), (1, -1), (-1, 1)), ((3, 2), (1, -1), (0, 1)), ((3, 2), (1, -1), (1, 1)),

                          ((3, 2), (-1, 0), (-1, -1)), ((3, 2), (-1, 0), (0, -1)), ((3, 2), (-1, 0), (1, -1)),
                          ((3, 2), (-1, 0), (-1, 0)),                             ((3, 2), (-1, 0), (1, 0)),
                          ((3, 2), (-1, 0), (-1, 1)), ((3, 2), (-1, 0), (0, 1)), ((3, 2), (-1, 0), (1, 1)),

                          ((3, 2), (1, 0), (-1, -1)), ((3, 2), (1, 0), (0, -1)), ((3, 2), (1, 0), (1, -1)),
                          ((3, 2), (1, 0), (-1, 0)),                             ((3, 2), (1, 0), (1, 0)),
                          ((3, 2), (1, 0), (-1, 1)), ((3, 2), (1, 0), (0, 1)), ((3, 2), (1, 0), (1, 1)),

                          ((3, 2), (-1, 1), (-1, -1)), ((3, 2), (-1, 1), (0, -1)), ((3, 2), (-1, 1), (1, -1)),
                          ((3, 2), (-1, 1), (-1, 0)),                             ((3, 2), (-1, 1), (1, 0)),
                          ((3, 2), (-1, 1), (-1, 1)), ((3, 2), (-1, 1), (0, 1)), ((3, 2), (-1, 1), (1, 1)),

                          ((3, 2), (0, 1), (-1, -1)), ((3, 2), (0, 1), (0, -1)), ((3, 2), (0, 1), (1, -1)),
                          ((3, 2), (0, 1), (-1, 0)),                             ((3, 2), (0, 1), (1, 0)),
                          ((3, 2), (0, 1), (-1, 1)), ((3, 2), (0, 1), (0, 1)), ((3, 2), (0, 1), (1, 1)),

                          ((3, 2), (1, 1), (-1, -1)), ((3, 2), (1, 1), (0, -1)), ((3, 2), (1, 1), (1, -1)),
                          ((3, 2), (1, 1), (-1, 0)),                             ((3, 2), (1, 1), (1, 0)),
                          ((3, 2), (1, 1), (-1, 1)), ((3, 2), (1, 1), (0, 1))}

        self.assertEqual(set(self.turn_strat._get_node_generator(self.players, self.buildings)), expected_moves)

if __name__ == '__main__':
    unittest.main()
