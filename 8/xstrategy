#!/usr/bin/python3.6
import sys
# allows an import from a directory above the parent directory
sys.path.append('../Santorini')
import json
import aux.parse_json as parse_json
import argparse
from Common.board import Board
from Common.rulechecker import RuleChecker
from Common.turn_strategy import TurnStrategy


"""
A systems level test harness that tests a choice of action strategy
Takes in multple lines of JSON commands and runs the strategy accordingly
prints outputs from the strategy commands
"""

# players for this board
players = []

# initialize board
board = Board()

# initialize strategy
turn_strategy = TurnStrategy()

# name of player who's turn it is
player_name = None

"""
parses the fields in a worker string
@return a tuple containing the player_num and the worker_num
"""
def parse_worker(worker: str) -> (int, int):
    player_name = worker[:-1]
    worker_num = int(worker[-1])
    player_num = players.index(player_name) + 1
    return player_num, worker_num

# used to parse directions into x and y differences
direction_map = {
"PUT": 0,
"SOUTH": 1,
"NORTH": -1,
"EAST": 1,
"WEST": -1
}

"""
parses a direction
@return tuple of the x and y differences produces by the direction
"""
def parse_direction(direction: [str, str]) -> (int, int):
    return direction_map[direction[0]], direction_map[direction[1]]

"""
makes sure a direction is valid: the x and y are both between [-1, 1] and 
the the direction is not (0, 0)
@return True if the direction is valid, False otherwise
"""
def verify_direction(direction: [int, int]) -> (int, int):
    return [val in range(-1, 2) for val in direction] and direction is not (0, 0)

"""
verifies if there will be a loss within N moves with the current move
"""
def handle_board(lookaheads: int):
    player_num = players.index(player_name)
    # move player to the beginning of the list
    # because turn_strategy expects that the first_player in the list
    # to be the player who's turn it is
    players.insert(0, players.pop(player_num))
    given_turn = turn_strategy.get_move(board.get_building_heights(), players, lookaheads)
    if given_move is not None:
        print(json.dumps("yes"))
    else:
        print(json.dumps("no"))

"""
verifies if there will be a new 
"""
def handle_move(worker: str, direction: [str, str], lookaheads: int):
    player_num = players.index(player_name)
    # move player to the beginning of the list
    # because turn_strategy expects that the first_player in the list
    # to be the player who's turn it is
    players.insert(0, players.pop(5))

    worker_player_num, worker_num = parse_worker(worker)

    # the tuple that represents the worker being moved
    move_worker = board.get_worker_position(worker_player_num, worker_num)

    given_turn = turn_strategy.get_move_with_move(board.get_buildings(), players, lookaheads, (move_worker, direction))
    if given_move is not None:
        print(json.dumps("yes"))
    else:
        print(json.dumps("no"))

"""
verifies if moving a worker and building in the given directions is valid or not
"""
def handle_move_and_build(worker: str, move_direction: [str, str], build_direction: [str, str], lookaheads: int):
    player_num = players.index(player_name)
    # move player to the beginning of the list
    # because turn_strategy expects that the first_player in the list
    # to be the player who's turn it is
    players.insert(0, players.pop(5))

    worker_player_num, worker_num = parse_worker(worker)

    # the tuple that represents the worker being moved
    move_worker = board.get_worker_position(worker_player_num, worker_num)

    given_turn = turn_strategy.get_move_with_move_build(board.get_buildings(), players, lookaheads, (move_worker, move_direction, build_direction))
    if given_move is not None:
        print(json.dumps("yes"))
    else:
        print(json.dumps("no"))

parsed_list = parse_json.parse_json(sys.stdin.read())

def set_board_and_players(board_array):
    # reset players
    global players
    players = []

    # append rows if the baord is a short board
    for i in range(6 - len(board_array)):
        board_array.append([0]*6)

    # backfill incomplete rows 
    for i in range(6):
        board_array[i] = board_array[i] + [0] * (6 - len(board_array[i]))

    for i in range(6):
        for j in range(6):

            # differentiate between number or string for the cell
            if isinstance(board_array[j][i], int):
                board.set_floor_height(i, j, board_array[j][i])
            elif isinstance(board_array[j][i], str):
                height = int(board_array[j][i][0])
                board.set_floor_height(i, j, height)
                player_name = board_array[j][i][1:-1]
                worker_num = int(board_array[j][i][-1]) - 1

                # determine if player exists already or not
                if player_name not in players:
                    players.append(player_name)

                # determine which player (1 or 2)
                player_num = players.index(player_name)
                board.set_worker(i, j, player_num, worker_num)
            else:
                raise ValueError(f"bad initial board: {board_array}")
    return board_array

while parsed_list:
    # get the player string (should be the first json item in a sequence)
    player_name = parsed_list.pop(0)

    # get the board_array
    board_array = parsed_list.pop(0)

    set_board_and_players(board_array)

    # get the lookahead rounds
    lookahead = parsed_list.pop(0)

    # make sure we aren't at the end of the input list and if the next cmd is a "move"
    if parsed_list and parsed_list[0][0] == "move":

        # get the move command
        move_cmd = parsed_list.pop(0)
        worker = move_cmd[1]
        move_dir = move_cmd[2]

        # make sure we aren't at the end of the list and if the next cmd is a "+board"
        if parsed_list and parsed_list[0][0] == "+build":
                build_cmd = parsed_list.pop(0)
                build_dir = build_cmd[1]
                handle_move_and_build(worker, move_dir, build_dir)

        # handle board + move
        else:
            handle_move(worker, move_dir)

    # handle just board
    else:
        handle_board(lookahead)
