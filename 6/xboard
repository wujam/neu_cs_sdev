#!/usr/bin/python3.6
import sys
# allows an import from a directory above the parent directory
sys.path.append('../Santorini')
import json
import aux.parse_json as parse_json
import argparse
from Common.board import Board

"""
A systems level test harness that tests a board
Takes in multple lines of JSON commands and runs the board accordingly
prints outputs from the board commands
"""

# initialize board
board = Board()

"""
parses the fields in a worker string
@return a tuple containing the player_num and the worker_num
"""
def parse_worker(worker: str) -> (int, int):
    player_name = worker[:-1]
    worker_num = int(worker[-1])
    player_num = players.index(player_name) + 1
    return player_num, worker_num

# used to parse directions into x and y differences
direction_map = {
"PUT": 0,
"SOUTH": 1,
"NORTH": -1,
"EAST": 1,
"WEST": -1
}

"""
parses a direction
@return tuple of the x and y differences produces by the direction
"""
def parse_direction(direction: [str, str]) -> (int, int):
    return direction_map[direction[0]], direction_map[direction[1]]

"""
moves a worker in the given direction
"""
def handle_move(worker: str, direction: [str, str]):
    player_num, worker_num = parse_worker(worker)
    dx, dy = parse_direction(direction)
    x, y = board.get_worker_position(player_num, worker_num)
    board.set_worker(x + dx, y + dy, player_num, worker_num)
    print("[]")

"""
builds a floor in the given direction
"""
def handle_build(worker: str, direction: [str, str]):
    player_num, worker_num = parse_worker(worker)
    dx, dy = parse_direction(direction)
    x, y = board.get_worker_position(player_num, worker_num)
    board.add_floor(x + dx, y + dy) 
    print("[]")

"""
determines if there is a neighboring cell in the given direction
"""
def handle_neighbor(worker: str, direction: [str, str]):
    player_num, worker_num = parse_worker(worker)
    dx, dy = parse_direction(direction)
    x, y = board.get_worker_position(player_num, worker_num)
    print("yes" if (x + dx) in range(0,6) and (y + dy) in range(0,6) else "no")

"""
determines if the cell in the given direction is occupied
"""
def handle_occupy(worker: str, direction: [str, str]):
    player_num, worker_num = parse_worker(worker)
    dx, dy = parse_direction(direction)
    x, y = board.get_worker_position(player_num, worker_num)
    print("yes" if (x + dx, y + dy) in board.get_worker_positions() else "no")
 
"""
gets the height of the cell in the given direction
"""
def handle_height(worker: str, direction: [str, str]):
    player_num, worker_num = parse_worker(worker)
    dx, dy = parse_direction(direction)
    x, y = board.get_worker_position(player_num, worker_num)
    print(board.get_floor_height(x + dx, y + dy))


# dict of string to function to switch on the command string
handle_message = {
    "move": handle_move,
    "build": handle_build,
    "neighbors": handle_neighbor,
    "occupied?": handle_occupy,
    "height": handle_height
}

# players for this board
players = []

parsed_list = parse_json.parse_json(sys.stdin.read())

# deal with the board json array, should be the first input
board_array = parsed_list.pop(0)

# append rows if the baord is a short board
for i in range(6 - len(board_array)):
    board_array.append([0]*6)

# backfill incomplete rows 
for i in range(6):
    board_array[i] = board_array[i] + [0] * (6 - len(board_array[i]))

for i in range(6):
    for j in range(6):

        # differentiate between number or string for the cell
        if isinstance(board_array[j][i], int):
            board.set_floor_height(i, j, board_array[j][i])
        elif isinstance(board_array[j][i], str):
            height = int(board_array[j][i][0])
            board.set_floor_height(i, j, height)
            player_name = board_array[j][i][1:-1]
            worker_num = int(board_array[j][i][-1])

            # determine if player exists already or not
            if player_name not in players:
                players.append(player_name)

            # determine which player (1 or 2)
            player_num = players.index(player_name) + 1
            board.set_worker(i, j, player_num, worker_num)
        else:
            raise ValueError(f"bad initial board: {board_array}")

# loop for every line of input
for cmd in parsed_list:
    if cmd[0] in handle_message.keys():
        handle_message[cmd[0]](cmd[1], cmd[2])
    else:
        continue
