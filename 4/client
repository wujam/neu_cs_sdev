#!/usr/bin/python3.6
import json
import sys
import socket
import aux.parse_json as parse_json
import argparse

spreadsheets = {}

def valid_jf(jf):
    # check if jf is a number
    if isinstance(jf, (int, float)):
        return True

    # check if jf is a list and it's length
    elif isinstance(jf, list) and len(jf) == 3:

        # check if it's a list reference
        if jf[0] == ">":
            # fail if the references aren't natural numbers
            if isinstance(jf[1], int) and isinstance(jf[2], int):
                return jf[1] >= 0 and jf[2] >= 0
            else:
                return False
        # check if it's a "+" or "*" operation
        elif jf[1] == "*" or jf[1] == "+":
            return valid_jf(jf[0]) and valid_jf(jf[2])
        else:
            return False
    else:
        return False

def valid_jf_spread(jf_spread):
    # check dimensions of json array structure
    # check if everything is a valid jf

    # check if jf_spread is and length > 0
    if isinstance(jf_spread, list) and len(jf_spread) > 0:
        # check if first row is a list
        if not isinstance(jf_spread[0], list):
            return False
        # get the row length
        row_len = len(jf_spread[0])

        # make sure row length isn't 0
        if row_len == 0:
            return False

        # make sure every row is the same length
        for row in jf_spread:
            if (not isinstance(row, list)) or len(row) != row_len:
                return False

            for jf in row:
                if not valid_jf(jf):
                    return False
        return True
    else:
        return False

# read arguments
parser = argparse.ArgumentParser()
parser.add_argument("hostname")
args = parser.parse_args()

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = args.hostname
port = 8000

sock.connect((host, port))
signup_name = '"jawu-srpo"'
sock.send(signup_name.encode("utf-8"))
internal_name = sock.recv(1024).decode()
print(internal_name, end='')

send_buf = []

while True:
    parsed_list = parse_json.parse_json(sys.stdin.readline())

    for i in range(len(parsed_list)):
        parsed_list[i] = json.loads(parsed_list[i])[1]

    for json_obj in parsed_list:
        cmd = json_obj

        # make sure the given json is a non empty list
        if type(cmd) is not list or len(cmd) == 0:
            continue

        if cmd[0] == "sheet":
            # enforce the length of the list for sheet commands
            if len(cmd) != 3:
                continue

            name = cmd[1]
            spread_array = cmd[2]

            # validate input types in the set cmd
            if not isinstance(name, str):
                continue

            # enforce that a rectangle of values is given
            if not valid_jf_spread(spread_array):
                continue

            # dump json to string and send
            send_buf.append(json_obj)

        elif cmd[0] == "set":
            # enforce the length of the list for set commands
            if len(cmd) != 5:
                continue

            name = cmd[1]
            x = cmd[2]
            y = cmd[3]
            json_formula = cmd[4]

            # validate types in the set cmd
            if not (isinstance(name, str) and isinstance(x, int)
                    and isinstance(y, int)):
                continue

            # make sure given positions are non negative
            if x < 0 or y < 0:
                continue

            # check if spread exists in spreadsheets and replace the cell
            # verify if the JF formatted correctly
            #if name in spreadsheets.keys() and valid_jf(json_formula):
            if valid_jf(json_formula):
                send_buf.append(json_obj)
            else:
                continue


        elif cmd[0] == "at":
            # enforce the length of the list for at commands
            if len(cmd) != 4:
                continue

            name = cmd[1]
            x = cmd[2]
            y = cmd[3]

            # validate types in the set cmd
            if not (isinstance(name, str) and isinstance(x, int)
                    and isinstance(y, int)):
                continue

            # make sure given positions are non negative
            if x < 0 or y < 0:
                continue

            send_buf.append(json_obj)
            sock.send(json.dumps(send_buf).encode())
            send_buf = []
            print(sock.recv(1024).decode(), end='')

        else:
            continue
